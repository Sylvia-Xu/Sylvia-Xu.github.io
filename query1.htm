
<html>
<head><meta name="viewport" content="width=device-width">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
function transformxml()
{
if (window.ActiveXObject)
 {
 // IE

 // XML:
 var xmltxt
 xmltxt=document.getElementById("xmlcode").value
 if (xmltxt=="")
  {
  alert("The XML is empty")
  return false;
  }
 xml=new ActiveXObject("MSXML2.DOMDocument");
 xml.async=false
 xml.loadXML(xmltxt)
 if (xml.parseError.errorCode!=0)
  {
  document.write("Error in XML<br><br>Line " + xml.parseError.line + ": " + xml.parseError.reason);   
  alert("Error in XML\n\nLine " + xml.parseError.line + ": " + xml.parseError.reason);
  return false
  }
 // XSL:
 var xsltxt
 xsltxt=document.getElementById("xsltcode").value
 if (xsltxt=="")
  {
  alert("The XSLT is empty")
  return false
  }
 xsl=new ActiveXObject("Microsoft.XMLDOM")
 xsl.async=false
 xsl.loadXML(xsltxt)
 if (xsl.parseError.errorCode!=0)
  {
  document.write("Error in XSLT<br><br>Line " + xsl.parseError.line + ": " + xsl.parseError.reason);     
  alert("Error in XSLT\n\nLine " + xsl.parseError.line + ": " + xsl.parseError.reason);
  return false
  }

 // Transform:
 document.write(xml.transformNode(xsl));     
 }
else if (document.implementation && document.implementation.createDocument)
 {
 // Mozilla
 // XML:
 var xmltxt
 xmltxt=document.getElementById("xmlcode").value
 if (xmltxt=="")
  {
  alert("The XML is empty")
  return false
  }
 var doc=new DOMParser();
 var xml=doc.parseFromString(xmltxt,"text/xml");
 if (xml.documentElement.nodeName=="parsererror")
  {
  document.write("Error in XML<br><br>" + xml.documentElement.childNodes[0].nodeValue);
  alert("Error in XML\n\n" + xml.documentElement.childNodes[0].nodeValue);
  return false;
  }
 // XSL:
 var xsltPrs=new XSLTProcessor();
 var xsltxt
 xsltxt=document.getElementById("xsltcode").value
 if (xsltxt=="")
  {
  alert("The XSLT is empty")
  return false
  }
 xsl=doc.parseFromString(xsltxt,"text/xml");
 if (xsl.documentElement.nodeName=="parsererror")
  {
  document.write("Error in XSLT<br><br>" + xsl.documentElement.childNodes[0].nodeValue);  
  alert("Error in XSLT\n\n" + xsl.documentElement.childNodes[0].nodeValue);
  return false;
  }

 xsltPrs.importStylesheet(xsl);
  
 // Transform:
 var result=xsltPrs.transformToFragment(xml,document);
   document.getElementById("result_output").appendChild(result);
// document.replaceChild(result,window.document.childNodes[0])
 }
else
 {
 // No Browser support:
 alert("Your browser does not support this example.");
 }
}
</script>
</head>

<body onload="transformxml()">
<div id="result_output"></div>
<textarea id="xmlcode" style="display:none"><?xml version="1.0" encoding="UTF-8"?>
<catalog>
  <history>
   <salary tend="1991-08-05" tstart="1990-08-05">40000</salary>
   <salary tend="1992-08-04" tstart="1991-08-05">42085</salary>
   <salary tend="1993-08-04" tstart="1992-08-04">42629</salary>
   <salary tend="1994-08-04" tstart="1993-08-04">45844</salary>
   <salary tend="1995-08-04" tstart="1994-08-04">47518</salary>
   <salary tend="1996-08-03" tstart="1995-08-04">47917</salary>
   <salary tend="1997-08-03" tstart="1996-08-03">52255</salary>
   <salary tend="1998-08-03" tstart="1997-08-03">53747</salary>
   <salary tend="1999-08-03" tstart="1998-08-03">56032</salary>
   <salary tend="2000-08-02" tstart="1999-08-03">58299</salary>
   <salary tend="2001-08-02" tstart="2000-08-02">60098</salary>
   <salary tend="9999-12-31" tstart="2001-08-02">59755</salary>
  </history>
</catalog>
</textarea>
<textarea id="xsltcode" style="display:none"><?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">  
    <xsl:template match="/">
        <html>
            <body>
                <h2>Selection and Temporal Projection - Salary History of Anneke Preusig</h2>
                <table border="1">
                    <tr bgcolor="#9acd32">
                        <th style="text-align:center">Start Date</th>
                        <th style="text-align:center">End Date</th>
                        <th style="text-align:center">Salary</th>
                    </tr>
                    <xsl:for-each select="catalog/history/salary">
                        <tr>
                            <td><xsl:value-of select="@tstart"/></td>
                            <td><xsl:value-of select="@tend"/></td>
                            <td><xsl:value-of select="."/></td>
                        </tr>
                    </xsl:for-each>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>
</textarea>
</body>
</html>